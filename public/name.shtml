<!doctype html>
<html lang="en">

<head>
    <!--#include file="inc/header.html"-->
    <!--#include file="inc/global-css.html"-->
    <!--#include file="inc/i18n-js.html"-->
    <!--#include file="inc/global-js.html"-->

    <style>
        #records th,
        #records td {
            font-size: 14px !important;
        }
    </style>

    <script>

        function get3DAvatarUrl(did) {
            if (isMobile()) {
                return null;
            }
            return getDIDRecord(did, 'avatar3d');
        }

        function getAvatarUrl(did) {
            let avatar = getDIDRecord(did, 'avatar');
            if (avatar) {
                return avatar;
            }
            let email = getDIDRecord(did, 'email');
            if (email) {
                return 'https://www.gravatar.com/avatar/' + md5(email.toLowerCase());
            }
            return '/assets/images/user.svg';
        }

        async function init_vm() {
            console.log('init vm...');
            let
                search = new URLSearchParams(location.search),
                name = search.get('name'),
                did;
            try {
                if (!name.trim()) {
                    throw 'no name.'
                }
                did = await queryDID(name.trim());
                if (!did) {
                    throw 'not found';
                }
            } catch (e) {
                console.error('load did failed.', e);
                $('#error').show();
                return;
            } finally {
                $('#loading').hide();
            }
            // set image:
            if (get3DAvatarUrl(did)) {
                let mv = '<model-viewer style="display:block; width:112px; height:112px;" environment-image="neutral" max-camera-orbit="60deg 150deg auto" min-camera-orbit="-60deg 10deg auto" id="reveal" loading="eager" shadow-intensity="0" exposure="0.75" disable-zoom camera-controls="" src="'
                    + get3DAvatarUrl(did)
                    + '" interaction-prompt="none" ar-status="not-presenting"></model-viewer>';
                $('#avatarImage').html(mv);
            } else {
                $('#avatarImage').css('backgroundImage', 'url(' + getAvatarUrl(did) + ')');
            }

            // init labels:
            let labels = [
                'redirect', 'nostr', 'avatar', 'avatar3d', 'email',
                'btc', 'ada', 'dash', 'doge', 'dot', 'fil', 'ltc', 'sol', 'trx', 'xlm', 'xmr', 'zec',
                'twitter', 'discord', 'github', 'reddit', 'telegram', 'youtube', 'tiktok', 'facebook', 'instagram', 'linkedin', 'pinterest'
            ];
            let placeholders = {
                nostr: 'npub1xxx',
                btc: 'bc1xxx',
                ltc: 'ltc1xxx',
                doge: 'Dxxx',
                trx: 'Txxx',
                fil: 'fxxx',
                zec: 'txxx'
            };
            let prefixes = {
                discord: 'https://discord.gg/',
                facebook: 'https://www.facebook.com/',
                github: 'https://github.com/',
                instagram: 'https://www.instagram.com/',
                linkedin: 'https://www.linkedin.com/in/',
                pinterest: 'https://www.pinterest.com/',
                reddit: 'https://reddit.com/user/',
                telegram: 'https://t.me/',
                tiktok: 'https://www.tiktok.com/@',
                twitter: 'https://twitter.com/',
                youtube: 'https://youtube.com/'
            };
            let postfixes = {
                nostr: 'Generate by MetaMask'
            };
            let records = {};
            for (let label of labels) {
                let value = getDIDRecord(did, label) || '';
                records[label] = {
                    editing: false,
                    old: value,
                    content: value,
                    edit: value,
                    prefix: prefixes[label] || '',
                    postfix: postfixes[label] || '',
                    placeholder: placeholders[label] || ''
                }
            }

            window.vm = new Vue({
                el: '#vm',
                data: {
                    account: null,
                    chainId: 0,
                    did: did,
                    not_set: '(not set)',
                    labels: labels,
                    records: records,
                    tab: 'tabOverview',
                    statusCopied: false,
                    transferTo: '',
                    acceptTransfer: false
                },
                computed: {
                    canWriteContract: function () {
                        return this.account && this.account.toLowerCase() === this.did.owner.toLowerCase() && this.chainId === window.CHAIN_ID;
                    },
                    statusCanUpdateRecords: function () {
                        let n = 0;
                        for (let label in this.records) {
                            let r = this.records[label];
                            if (r.editing) {
                                return false;
                            }
                            if (r.content !== r.old) {
                                n++;
                            }
                        }
                        return n > 0;
                    }
                },
                methods: {
                    isRecordChanged: function (label) {
                        return this.records[label].content !== this.records[label].old;
                    },
                    resetRecord: function (label) {
                        this.records[label].content = this.records[label].old;
                        this.records[label].edit = this.records[label].old;
                    },
                    startEditRecord: function (label) {
                        this.records[label].editing = true;
                    },
                    doneEditRecord: function (label) {
                        this.records[label].content = this.records[label].edit;
                        this.records[label].editing = false;
                    },
                    cancelEditRecord: function (label) {
                        this.records[label].edit = this.records[label].content;
                        this.records[label].editing = false;
                    },
                    editByPostfix: async function (label) {
                        if (label === 'nostr') {
                            await this.editNostr(label);
                        }
                    },
                    editNostr: async function (label) {
                        try {
                            let
                                sig = await vm_wallet.signMessage('nostr:' + ethers.utils.getAddress(this.account)),
                                nsec = sig.substring(2, 66),
                                npub = NostrTools.getPublicKey(nsec),
                                npubEncode = NostrTools.nip19.npubEncode(npub);
                            this.records[label].edit = npubEncode;
                        } catch (err) {
                            showAlert('Error', translateError(err));
                        }
                    },
                    updateRecords: async function () {
                        let
                            changed_labels = [],
                            changed_contents = [],
                            loading = null,
                            confirms = 3,
                            controller = new ethers.Contract(
                                window.CONTRACTS.bindController.address,
                                window.CONTRACTS.bindController.abi,
                                window.getWeb3Provider().getSigner()
                            );
                        for (let label in this.records) {
                            let r = this.records[label];
                            if (r.content !== r.old) {
                                changed_labels.push(label);
                                changed_contents.push(r.content);
                                console.log(`[records] will update ${label} = ${r.content}`);
                            }
                        }

                        try {
                            loading = showLoading('Update Name Records', 'Please sign the transaction to update records on blockchain...');
                            let tx = await controller.batchBind(this.did.id, changed_labels, changed_contents);
                            for (let i = 1; i <= confirms; i++) {
                                loading.setMessage('Waiting for block confirms ' + i + '/' + confirms + '...');
                                await tx.wait(i);
                            }
                            for (let i = 10; i > 0; i--) {
                                loading.setMessage('Successfully updated records of name "' + this.did.name + '"! Refresh page after ' + i + ' seconds...');
                                await sleep(1000);
                            }
                            location.reload();
                        }
                        catch (err) {
                            console.error(err);
                            loading.close();
                            showAlert('Error', translateError(err));
                        }
                    },
                    transfer: async function () {
                        if (!ethers.utils.isAddress(this.transferTo)) {
                            return showAlert('Error', 'Invalid transfer address: ' + this.transferTo);
                        }
                        if (!this.canWriteContract) {
                            return showAlert('Error', 'Please connect wallet with owner address: ' + this.did.owner);
                        }
                        let
                            loading = null,
                            confirms = 3,
                            registry = new ethers.Contract(
                                window.CONTRACTS.registry.address,
                                window.CONTRACTS.registry.abi,
                                window.getWeb3Provider().getSigner());
                        try {
                            loading = showLoading('Transfer', 'Check receiver address...');
                            let balanceOf = await registry.balanceOf(this.transferTo);
                            if (!balanceOf.isZero()) {
                                throw 'The receiver ' + this.abbr(this.transferTo) + ' cannot retrieve this name because it is hold one name already.';
                            }
                            loading.setMessage('Please sign the transfer transaction to confirm transfer...');
                            let tx = await registry.safeTransferFrom(this.account, this.transferTo, this.did.id);
                            for (let i = 1; i <= confirms; i++) {
                                loading.setMessage('Waiting for block confirms ' + i + '/' + confirms + '...');
                                await tx.wait(i);
                            }
                            for (let i = 10; i > 0; i--) {
                                loading.setMessage('Successfully transfered name "' + this.did.name + '"! Refresh page after ' + i + ' seconds...');
                                await sleep(1000);
                            }
                            location.reload();
                        }
                        catch (err) {
                            console.error(err);
                            loading.close();
                            showAlert('Error', translateError(err));
                        }
                    },
                    selectTab: function (tab) {
                        this.tab = tab;
                    },
                    domain: function (name) {
                        return name + '.' + window.DOMAIN;
                    },
                    domainUrl: function (name) {
                        return 'https://' + this.domain(name);
                    },
                    abbr: function (obj) {
                        return window.abbr(obj);
                    },
                    copyText: function (s) {
                        let that = this;
                        copyText(s, () => {
                            that.statusCopied = true;
                            setTimeout(() => {
                                that.statusCopied = false;
                            }, 3000);
                        });
                    },
                    scanUrl: function (obj) {
                        return window.scanUrl(obj);
                    },
                    openSeaUrl: function () {
                        return window.OPENSEA_ASSET_URL + did.id;
                    },
                    accountChanged: function (account) {
                        this.account = account;
                    },
                    chainChanged: function (chainId) {
                        this.chainId = chainId;
                    },
                    image: function () {
                        let
                            name = did.name,
                            addr = window.abbr(did.owner).toLowerCase(),
                            te = new TextEncoder(),
                            svgImage =
                                `<svg viewBox="0 0 960 540" width="960" height="540" xmlns="http://www.w3.org/2000/svg">
<style>.S{fill:#fff;font:bold 36px sans-serif;dominant-baseline:middle;text-anchor:middle}</style>
<rect x="0" y="0" width="960" height="540" fill="#003259"></rect>
<path d="M0 419L12.3 419.5C24.7 420 49.3 421 74 419C98.7 417 123.3 412 148 410.3C172.7 408.7 197.3 410.3 221.8 412.3C246.3 414.3 270.7 416.7 295.2 417.2C319.7 417.7 344.3 416.3 369 413C393.7 409.7 418.3 404.3 443 402C467.7 399.7 492.3 400.3 517 404C541.7 407.7 566.3 414.3 591 419.8C615.7 425.3 640.3 429.7 664.8 426.2C689.3 422.7 713.7 411.3 738.2 410C762.7 408.7 787.3 417.3 812 415.5C836.7 413.7 861.3 401.3 886 396.5C910.7 391.7 935.3 394.3 947.7 395.7L960 397L960 541L947.7 541C935.3 541 910.7 541 886 541C861.3 541 836.7 541 812 541C787.3 541 762.7 541 738.2 541C713.7 541 689.3 541 664.8 541C640.3 541 615.7 541 591 541C566.3 541 541.7 541 517 541C492.3 541 467.7 541 443 541C418.3 541 393.7 541 369 541C344.3 541 319.7 541 295.2 541C270.7 541 246.3 541 221.8 541C197.3 541 172.7 541 148 541C123.3 541 98.7 541 74 541C49.3 541 24.7 541 12.3 541L0 541Z" fill="#4facf7"></path>
<path d="M0 442L12.3 443.3C24.7 444.7 49.3 447.3 74 451C98.7 454.7 123.3 459.3 148 455.7C172.7 452 197.3 440 221.8 435.3C246.3 430.7 270.7 433.3 295.2 439.2C319.7 445 344.3 454 369 454.8C393.7 455.7 418.3 448.3 443 443.2C467.7 438 492.3 435 517 435C541.7 435 566.3 438 591 438.3C615.7 438.7 640.3 436.3 664.8 439C689.3 441.7 713.7 449.3 738.2 454.8C762.7 460.3 787.3 463.7 812 462C836.7 460.3 861.3 453.7 886 449.2C910.7 444.7 935.3 442.3 947.7 441.2L960 440L960 541L947.7 541C935.3 541 910.7 541 886 541C861.3 541 836.7 541 812 541C787.3 541 762.7 541 738.2 541C713.7 541 689.3 541 664.8 541C640.3 541 615.7 541 591 541C566.3 541 541.7 541 517 541C492.3 541 467.7 541 443 541C418.3 541 393.7 541 369 541C344.3 541 319.7 541 295.2 541C270.7 541 246.3 541 221.8 541C197.3 541 172.7 541 148 541C123.3 541 98.7 541 74 541C49.3 541 24.7 541 12.3 541L0 541Z" fill="#2e7bc1"></path>
<path d="M0 469L12.3 474.3C24.7 479.7 49.3 490.3 74 495C98.7 499.7 123.3 498.3 148 495C172.7 491.7 197.3 486.3 221.8 484.2C246.3 482 270.7 483 295.2 481.2C319.7 479.3 344.3 474.7 369 472.8C393.7 471 418.3 472 443 471.8C467.7 471.7 492.3 470.3 517 472.5C541.7 474.7 566.3 480.3 591 485.2C615.7 490 640.3 494 664.8 496.5C689.3 499 713.7 500 738.2 499.8C762.7 499.7 787.3 498.3 812 494.3C836.7 490.3 861.3 483.7 886 483.2C910.7 482.7 935.3 488.3 947.7 491.2L960 494L960 541L947.7 541C935.3 541 910.7 541 886 541C861.3 541 836.7 541 812 541C787.3 541 762.7 541 738.2 541C713.7 541 689.3 541 664.8 541C640.3 541 615.7 541 591 541C566.3 541 541.7 541 517 541C492.3 541 467.7 541 443 541C418.3 541 393.7 541 369 541C344.3 541 319.7 541 295.2 541C270.7 541 246.3 541 221.8 541C197.3 541 172.7 541 148 541C123.3 541 98.7 541 74 541C49.3 541 24.7 541 12.3 541L0 541Z" fill="#004e8d"></path>
<text x="50%" y="35%" class="S" style="font-size:72px">${name}</text><text x="50%" y="55%" class="S">${name}.opendid.me</text><text x="50%" y="68%" class="S">${addr}</text></svg>`;
                        return 'data:image/svg+xml;base64,' + base64js.fromByteArray(te.encode(svgImage));
                    }
                },
                mounted: async function () {
                    $('#vm').show();
                }
            });
        }
    </script>
</head>

<body>
    <!--#include file="inc/dialog.html"-->
    <!--#include file="inc/nav.html"-->

    <div id="loading" class="container mt-4 mb-4">
        <div class="row">
            <div class="col-12">
                <div class="spinner-border">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    </div>

    <div id="error" class="container mt-4 mb-4" style="display:none">
        <div class="row">
            <div class="col-12">
                <span class="text-danger">Failed load DID by name.</span>
                <a href="javascript:location.reload()">Retry</a>
            </div>
        </div>
    </div>

    <div id="vm" class="container mt-4" style="display:none">
        <div class="row mb-4">
            <div class="col-12">
                <!-- Bg -->
                <div class="rounded-top"
                    style="padding-top: 100px; background: url(/assets/images/bg.svg) no-repeat; background-size: cover;">
                </div>
                <div
                    class="d-flex align-items-end justify-content-between bg-white px-4 pt-2 pb-4 rounded-none rounded-bottom shadow">
                    <div class="d-flex align-items-center">
                        <div class="me-2 ms-2 position-relative d-flex justify-content-end align-items-end"
                            style="margin-top: -60px;">
                            <div id="avatarImage" class="rounded-circle border border-4 border-white"
                                style="display: block; width: 120px; height: 120px; background-color: #fff; background-size: cover;">
                            </div>
                        </div>
                        <div class="lh-1">
                            <h3 class="mb-3" v-text="did.name"></h3>
                            <p class="mb-2"><span data-i18n:ja="オーナー" data-i18n:ko="소유자"
                                    data-i18n:zh="所有者">Owner</span>: <a v-bind:href="scanUrl(did.owner)"
                                    target="_blank">
                                    <span v-text="abbr(did.owner)"></span>
                                    <i class="bi bi-box-arrow-up-right"></i></a></p>
                            <p class="mb-0">
                                <span data-i18n:ja="ホームページ" data-i18n:ko="홈페이지" data-i18n:zh="主頁">Home</span>
                                : <a v-bind:href="domainUrl(did.name)" target="_blank">
                                    <span v-text="domain(did.name)"></span>
                                    <i class="bi bi-box-arrow-up-right"></i></a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12 col-lg-3 mb-4">
                <div class="p-4 bg-white rounded shadow">
                    <h6 class="mb-3 d-none d-lg-block" data-i18n:ja="設定" data-i18n:ko="설정" data-i18n:zh="設定">Settings
                    </h6>
                    <ul id="nav-settings" class="nav nav-pills">
                        <li class="nav-item">
                            <a v-on:click="selectTab('tabOverview')" v-bind:class="{'active':tab==='tabOverview'}"
                                class="nav-link" href="#0">
                                <i class="bi bi-house"></i>
                                <span data-i18n:ja="概要" data-i18n:ko="개요" data-i18n:zh="概述">Overview</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a v-on:click="selectTab('tabRecords')" v-bind:class="{'active':tab==='tabRecords'}"
                                class="nav-link" href="#0">
                                <i class="bi bi-card-list"></i>
                                <span data-i18n:ja="記録" data-i18n:ko="기록" data-i18n:zh="記錄">Records</span></a>
                        </li>
                        <li class="nav-item">
                            <a v-on:click="selectTab('tabTransfer')" v-bind:class="{'active':tab==='tabTransfer'}"
                                class="nav-link" href="#0">
                                <i class="bi bi-arrow-left-right"></i>
                                <span data-i18n:ja="移行" data-i18n:ko="옮기다" data-i18n:zh="轉移">Transfer</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>

            <div class="col-12 col-lg-9 mb-4">
                <div class="p-4 bg-white rounded shadow">
                    <!-- overview -->
                    <div id="tabOverview" v-show="tab==='tabOverview'">
                        <h6 class="mb-3 pb-3 border-bottom">
                            <i class="bi bi-house"></i>
                            <span data-i18n:ja="概要" data-i18n:ko="개요" data-i18n:zh="概述">Overview</span>
                        </h6>
                        <dl class="row">
                            <dt class="col-sm-3" data-i18n:ja="名前" data-i18n:ko="이름" data-i18n:zh="名字">Name</dt>
                            <dd class="col-sm-9" v-text="did.name"></dd>

                            <dt class="col-sm-3" data-i18n:ja="ホームページ" data-i18n:ko="홈페이지" data-i18n:zh="主頁">Home</dt>
                            <dd class="col-sm-9"><a v-bind:href="domainUrl(did.name)" target="_blank">
                                    <span v-text="domain(did.name)"></span>
                                    <i class="bi bi-box-arrow-up-right"></i></a>
                            </dd>

                            <dt class="col-sm-3" data-i18n:ja="オーナー" data-i18n:ko="소유자" data-i18n:zh="所有者">Owner</dt>
                            <dd class="col-sm-9"><a v-bind:href="scanUrl(did.owner)" target="_blank">
                                    <span v-text="abbr(did.owner)"></span>
                                    <i class="bi bi-box-arrow-up-right"></i></a>
                            </dd>

                            <dt class="col-sm-3">Registered Block</dt>
                            <dd class="col-sm-9"><a v-bind:href="scanUrl(did.blockNumber)" target="_blank">
                                    <span v-text="did.blockNumber"></span>
                                    <i class="bi bi-box-arrow-up-right"></i></a>
                            </dd>

                            <dt class="col-sm-3">Registered TX</dt>
                            <dd class="col-sm-9"><a v-bind:href="scanUrl(did.transactionHash)" target="_blank">
                                    <span v-text="abbr(did.transactionHash)"></span>
                                    <i class="bi bi-box-arrow-up-right"></i></a></dd>

                            <dt class="col-sm-3">NFT ID</dt>
                            <dd class="col-sm-9"><span id="spanTokenId" v-bind:title="did.id"
                                    v-text="abbr(did.id)"></span>
                                <a v-show="!statusCopied" v-on:click="copyText(did.id)" href="#0"><i
                                        class="bi bi-clipboard"></i> Copy</a>
                                <span v-show="statusCopied" class="text-success"><i class="bi bi-clipboard-check"></i>
                                    Copied</span>
                            </dd>

                            <dt class="col-sm-3" data-i18n:ja="NFT画像" data-i18n:ko="NFT 이미지" data-i18n:zh="NFT圖像">NFT
                                Image</dt>
                            <dd class="col-sm-9"><img v-bind:src="image()" class="rounded" style="width: 80%;">
                            </dd>
                        </dl>
                    </div>
                    <!--// overview -->

                    <!-- records -->
                    <div id="tabRecords" v-show="tab==='tabRecords'">
                        <h6 class="mb-3 pb-3 border-bottom">
                            <i class="bi bi-card-list"></i>
                            <span data-i18n:ja="記録" data-i18n:ko="기록" data-i18n:zh="記錄">Records</span>
                        </h6>
                        <table id="records" class="table">
                            <thead>
                                <tr>
                                    <th style="width:90px" data-i18n:ja="ラベル" data-i18n:ko="상표" data-i18n:zh="標籤">Label
                                    </th>
                                    <th data-i18n:ja="コンテンツ" data-i18n:ko="콘텐츠" data-i18n:zh="內容">Content</th>
                                    <th style="width:150px" data-i18n:ja="オペレーション" data-i18n:ko="작업" data-i18n:zh="操作">
                                        Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="label in labels" v-bind:class="{'x-changed': isRecordChanged(label)}">
                                    <td>
                                        <span v-text="label.toUpperCase()"></span>
                                    </td>
                                    <td style="max-width:400px">
                                        <span v-show="!records[label].editing"
                                            v-text="records[label].content || not_set"
                                            v-bind:class="{'text-muted':records[label].content==='', 'text-truncate':true}"
                                            v-bind:title="records[label].content" style="display:block"></span>
                                        <form v-show="records[label].editing">
                                            <div v-show="records[label].prefix !== '' || records[label].postfix !== ''"
                                                class="input-group input-group-sm">
                                                <span v-show="records[label].prefix" v-text="records[label].prefix"
                                                    class="input-group-text"></span>
                                                <input v-model="records[label].edit"
                                                    v-bind:placeholder="records[label].placeholder" type="text"
                                                    length="100" class="form-control form-control-sm">
                                                <button v-on:click="editByPostfix(label)"
                                                    v-show="records[label].postfix" v-text="records[label].postfix"
                                                    class="btn btn-outline-secondary" type="button"></button>
                                            </div>
                                            <input
                                                v-show="records[label].prefix === '' && records[label].postfix === ''"
                                                v-model="records[label].edit"
                                                v-bind:placeholder="records[label].placeholder" type="text" length="100"
                                                class="form-control form-control-sm">
                                        </form>
                                    </td>
                                    <td>
                                        <div v-show="canWriteContract">
                                            <a v-show="!records[label].editing" v-on:click="startEditRecord(label)"
                                                href="#0">
                                                <i class="bi bi-pencil-square"></i> <span data-i18n:ja="編集"
                                                    data-i18n:ko="편집하다" data-i18n:zh="編輯">Edit</span>
                                            </a>
                                            <a v-show="!records[label].editing && isRecordChanged(label)"
                                                v-on:click="resetRecord(label)" href="#0" class="ms-2">
                                                <i class="bi bi-arrow-counterclockwise"></i> <span data-i18n:ja="リセット"
                                                    data-i18n:ko="초기화" data-i18n:zh="重置">Reset</span>
                                            </a>
                                            <a v-show="records[label].editing" v-on:click="doneEditRecord(label)"
                                                href="#0"><i class="bi bi-check-circle"></i> <span>OK</span></a>
                                            <a v-show="records[label].editing" v-on:click="cancelEditRecord(label)"
                                                href="#0" class="ms-2">
                                                <i class="bi bi-x-circle"></i> <span data-i18n:ja="キャンセル"
                                                    data-i18n:ko="취소" data-i18n:zh="取消">Cancel</span>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        <div v-show="canWriteContract" class="pe-4">
                            <button v-on:click="updateRecords" v-bind:disabled="!statusCanUpdateRecords" type="button"
                                class="float-end btn btn-outline-primary" data-i18n:ja="更新" data-i18n:ko="새롭게 하다"
                                data-i18n:zh="更新">Update</button>
                            <p>Please note that you must click "Update" to write updated records on blockchain.</p>
                        </div>

                        <div v-show="!canWriteContract" class="pt-3 pe-4">
                            <div class="alert alert-warning">
                                To update records, please connect your wallet and switch to owner address.
                            </div>
                        </div>
                    </div>
                    <!--// records -->

                    <div id="tabTransfer" v-show="tab==='tabTransfer'">
                        <h6 class="mb-3 pb-3 border-bottom">
                            <i class="bi bi-arrow-left-right"></i>
                            <span data-i18n:ja="移行" data-i18n:ko="옮기다" data-i18n:zh="轉移">Transfer</span>
                        </h6>
                        <p>The OpenDID name "<span v-text="did.name"></span>" is also a NFT which is owned by
                            <a v-bind:href="scanUrl(did.owner)" target="_blank">
                                <span v-text="abbr(did.owner)"></span>
                                <i class="bi bi-box-arrow-up-right"></i>
                            </a>.
                        </p>
                        <p>You can transfer owner of the NFT to change the owner of OpenDID name.</p>
                        <p>If you want to sell your OpenDID name, you can list your name on
                            <a v-bind:href="openSeaUrl()" target="_blank">
                                OpenSea
                                <i class="bi bi-box-arrow-up-right"></i>
                            </a> and give it a fixed or bid price.
                        </p>
                        <p>Records are not changed after transfer or sold.</p>
                        <h5>Direct Transfer</h5>
                        <form v-show="canWriteContract" v-on:submit.prevent="transfer">
                            <div class="mb-3">
                                <label for="toAddress" class="form-label">Transfer to address:</label>
                                <input v-model="transferTo" id="toAddress" placeholder="0x" type="text" length="42"
                                    class="form-control">
                            </div>
                            <div class="mb-3">
                                <label class="form-label"><input v-model="acceptTransfer" type="checkbox" value="true"
                                        class="form-check-input"> I understand, transfer this name.</label>
                            </div>
                            <div class="mb-3">
                                <button v-bind:disabled="!acceptTransfer" type="submit"
                                    class="btn btn-large btn-danger">
                                    <i class="bi bi-arrow-left-right"></i>
                                    <span data-i18n:ja="移行" data-i18n:ko="옮기다" data-i18n:zh="轉移">Transfer</span>
                                </button>
                            </div>
                        </form>
                        <div v-show="!canWriteContract" class="mt-3 mb-3">
                            <div class="alert alert-warning">
                                To transfer name, please connect your wallet and switch to
                                owner address <span v-text="abbr(did.owner)"></span>.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--#include file="inc/footer.html"-->
</body>

</html>